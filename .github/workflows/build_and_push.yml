name: Build and Push Multi-Arch Image with CVE Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      # <- TUTAJ musimy mieć DOKŁADNIE "mekkr/app-cache"
      DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/app-cache
      IMAGE_NAME:      ghcr.io/${{ secrets.GHCR_USERNAME }}/weather-app

    steps:
      # 1) Set up QEMU (potrzebne do budowy multi-arch)
      - name: Set up QEMU (to support building multi-arch images)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --allow-insecure-entitlement security.insecure

      # 2) Logowanie do DockerHuba (cache) oraz GHCR
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.CR_PAT }}

      # 3) Budowa multi-arch obrazu i zapis cache w DockerHubie
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v4
        with:
          context: ../
          file: ../Dockerfile
          platforms: linux/amd64,linux/arm64

          cache-from: type=registry,ref=${{ env.DOCKERHUB_REPO }}:cache-latest
          cache-to:   type=registry,ref=${{ env.DOCKERHUB_REPO }}:cache-${{ github.sha }},mode=max

          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          push: false

      # 4) Instalacja Trivy (skaner CVE)
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main \
            | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      # 5) Skanowanie obrazu Trivy pod kątem CVE (CRITICAL i HIGH)
      - name: Run Trivy scan on built images
        id: trivy-scan
        run: |
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ env.IMAGE_NAME }}:latest --platform linux/amd64
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ env.IMAGE_NAME }}:latest --platform linux/arm64

      # 6) Jeśli Trivy nie zwróci błędów (brak CRITICAL/HIGH) – wypychamy obraz do GHCR
      - name: Push images to GHCR
        if: ${{ success() }}
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

